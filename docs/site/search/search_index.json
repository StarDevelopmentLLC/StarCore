{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the StarCore Wiki!</p> <p>StarCore is a developer-only resource that runs as a plugin. If you are a server owner, please just download StarCore and drop it into the plugins folder. The default config has comments to explain what each setting does. However, there is a command for managing colors, please see Command for usage and permissions</p> <p>If you are a developer, please see Installation to get started</p>"},{"location":"command/","title":"The Command","text":"<p>There is a single command for StarCore and it only focuses on reloading the config as well as managing custom color codes. For server owner defined colors, you must be using plugins that support <code>ColorUtils</code> from StarMCLib I (Firestar311) have a chat plugin that is in progress that supports this, however, it is not yet released (As of 3/1/24). </p> <p>The command itself requires the permission <code>starcore.admin</code> as a base. </p>"},{"location":"command/#reload-sub-command","title":"Reload Sub command","text":"<p>The reload sub command allows you to reload the configs without having to restart the server. This does not save <code>config.yml</code> but does save <code>colors.yml</code> Permission: <code>starcore.admin.reload</code> Usage: <code>/starcore reload</code></p>"},{"location":"command/#color-sub-command","title":"Color Sub Command","text":"<p>The color sub command allows management of all colors from StarMCLib's ColorUtils. However, one thing to note, only colors added via this command will be saved to the <code>colors.yml</code> file if the config option is true. The base permission for this command is <code>starcore.admin.color</code> </p>"},{"location":"command/#starcore-color-listsymbols","title":"<code>/starcore color listsymbols</code>","text":"<p>This command shows all valid symbols that are used as a prefix to color codes. You are not restricted to just the <code>&amp;</code> symbol with this utility. I did this to make it so that I can alias colors.  </p>"},{"location":"command/#starcore-color-listcolors","title":"<code>/starcore color listcolors</code>","text":"<p>This command lists all of the custom colors registered based on their chat code, hex value and which plugin it came from.  </p>"},{"location":"command/#starcore-color-add-code-hex-permission","title":"<code>/starcore color add &lt;code&gt; &lt;hex&gt; [permission]</code>","text":"<p>This command allows you to add a custom color based on a two character <code>code</code>, a 3 or 6 character <code>hex</code> value (prefixed by a <code>#</code>) and an optional <code>permission</code>. The first part of the <code>code</code> must be one of the valid symbols under the listsymbols command. The HEX Value must be prefixed with a <code>#</code> and have 3 or 6 characters that range from 0-9,A-F (Case insensitive). The permission can be anything you want. However it is only respected if a plugin decides to support this functionality. Also messages sent by plugins directly do not support this either. Please check the plugin documentation that is using this utility to see if they support ColorUtils Permissions. Command Permission: <code>starcore.admin.color.add</code></p>"},{"location":"command/#starcore-color-remove-code","title":"<code>/starcore color remove &lt;code&gt;</code>","text":"<p>This command allows you to remove a color based on the <code>code</code>. This can remove ANY of the custom colors, even ones not from StarCore. Please be careful with this as it can possibly break other plugin formatting. Permission: <code>starcore.admin.color.remove</code></p>"},{"location":"installation/","title":"Installation","text":"<p>StarCore runs as a plugin and is only intended to be run as a plugin. StarCore does provide downstream dependencies for the shaded Star Development libraries. There should be no need to depend on them directly.  </p>"},{"location":"installation/#choosing-a-build-tool","title":"Choosing a Build Tool","text":"<p>The two primary build tools for Java are Maven and Gradle. Pick one and stick with it.</p>"},{"location":"installation/#jitpack-repository","title":"JitPack Repository","text":"<p>Star Development LLC uses JitPack as the repository for development. You must have this repository in whichever build tool you wish to use.</p>"},{"location":"installation/#maven","title":"Maven","text":"<pre><code>&lt;repositories&gt;\n    &lt;repository&gt;\n        &lt;id&gt;jitpack.io&lt;/id&gt;\n        &lt;url&gt;https://jitpack.io&lt;/url&gt;\n    &lt;/repository&gt;\n&lt;/repositories&gt;\n</code></pre>"},{"location":"installation/#gradle","title":"Gradle","text":"<pre><code>repositories {\n    maven { url 'https://jitpack.io' }\n}\n</code></pre>"},{"location":"installation/#starcore-dependency-information","title":"StarCore Dependency Information","text":"<p>Replace <code>{VERSION}</code> with the version of StarCore you are using!</p>"},{"location":"installation/#maven_1","title":"Maven","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.github.StarDevelopmentLLC&lt;/groupId&gt;\n    &lt;artifactId&gt;StarCore&lt;/artifactId&gt;\n    &lt;version&gt;{VERSION}&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"installation/#gradle_1","title":"Gradle","text":"<pre><code>dependencies {\n    compileOnly 'com.github.StarDevelopmentLLC:StarLib:{VERSION}'\n}\n</code></pre> <p>After you are done installing StarCore, take a look at tabs above for the different aspects of this plugin. </p>"},{"location":"starclock/","title":"StarClock Integration","text":"<p>StarCore registers and provides an instance of the <code>ClockManager</code> to the Bukkit ServicesManager as well as registering the <code>ClockRunnable</code> to the Scheduler.  </p> <p>You can obtain this instance by the following. <pre><code>RegisteredServiceProvider&lt;ClockManager&gt; rsp = Bukkit.getServicesManager().getRegistration(ClockManager.class);\nif (rsp != null) {\n    ClockManager clockManager = rsp.getProvider();\n}\n</code></pre> Change the variables as needed for your use case, but it is best practice to have a null-check on the provider. Before trying to get the instance.  </p>"},{"location":"starlib/","title":"StarLib Integration","text":"<p>This plugin provides StarLib as a shaded library so plugins depending on StarCore have access to StarLib. The only direct implementation of a StarLib resource is the <code>TaskFactory</code> and the instance is provided by StarMCLib and registered to the ServicesManager. </p> <pre><code>RegisteredServiceProvider&lt;TaskFactory&gt; rsp = Bukkit.getServicesManager().getRegistration(TaskFactory.class);\nif (rsp != null) {\nTaskFactory taskFactory = rsp.getProvider();\n}\n</code></pre> <p>Otherwise the others are just classes you can use that don't need specific registration. </p>"},{"location":"starmclib/","title":"StarMCLib Integration","text":"<p>StarCore provides integration and support for things withing StarMCLib. Please see below for what these are.  </p>"},{"location":"starmclib/#colorutils","title":"ColorUtils","text":"<p>This plugin provides access to the ColorUtils feature and a command to manage them. There are plans to change up ColorUtils, and that will be documented here in the future.  </p>"},{"location":"starmclib/#serveractor","title":"ServerActor","text":"<p>The <code>ServerActor</code> class in StarMCLib allows cusomizing the Console UUID. StarCore has a config option for this and sets it when StarCore loads. StarCore also registers the <code>ServerActor</code> instance to the ServicesManager as well. Below is a code snippet. <pre><code>RegisteredServiceProvider&lt;ServerActor&gt; rsp = Bukkit.getServicesManager().getRegistration(ServerActor.class);\nif (rsp != null) {\n    ServerActor serverActor = rsp.getProvider();\n}\n</code></pre></p>"},{"location":"starsql/","title":"StarSQL Integration","text":"<p>StarCore provides access to all 4 of the supported SQL Types that StarSQL implements.  </p> Name Version MySQL 8.1.0 H2 2.2.220 PostgreSQL 42.6.0 SQLite 43.0.0 <p>StarCore provides a default instance for <code>DatabaseRegistry</code> to the ServicesManager. <pre><code>RegisteredServiceProvider&lt;DatabaseRegistry&lt;?&gt;&gt; rsp = Bukkit.getServicesManager().getRegistration(DatabaseRegistry.class);\nif (rsp != null) {\n    DatabaseRegistry&lt;?&gt; databaseRegistry = rsp.getProvider();\n    SQLDatabaseRegistry sqlDatabaseRegistry = (SQLDatabaseRegistry) databaseRegistry;\n}\n</code></pre></p> <p>Please note: This was intended to be used with multiple types of databases outside of SQL, and I may still do that, however the instance is a <code>SQLDatabaseRegistry</code>.</p>"}]}